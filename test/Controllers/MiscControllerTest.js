/*
 * AKKBLFPIM23Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.MiscController;
const AuthentificationByPasswordRequest = testerlib.AuthentificationByPasswordRequest;
const AuthentificationByRefreshTokenRequest = testerlib.AuthentificationByRefreshTokenRequest;

describe("MiscController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testAuthentificationByPassword response", function testAuthentificationByPasswordTest(done) {
        // parameters for the API call
        let body = baseController.getObjectMapper().mapObject({"username": "{{username}}", "password": "{{password}}", "grant_type": "password"}, 'AuthentificationByPasswordRequest');
        let contentType = 'application/json';

        controller.createAuthentificationByPassword(body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * TODO: Add Description
     */
    it("should testAuthentificationByRefreshToken response", function testAuthentificationByRefreshTokenTest(done) {
        // parameters for the API call
        let body = baseController.getObjectMapper().mapObject({"refresh_token": "{{refreshToken}}", "grant_type": "refresh_token"}, 'AuthentificationByRefreshTokenRequest');
        let contentType = 'application/json';

        controller.createAuthentificationByRefreshToken(body, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });
});
